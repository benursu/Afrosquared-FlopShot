// shader inspired by Heartfelt - by Martijn Steinrucken aka BigWings - 2017
// https://www.shadertoy.com/view/ltffzl

precision highp float;

#define S(a, b, t) smoothstep(a, b, t)

vec3 N13(float p) {
  //  from DAVE HOSKINS
 vec3 p3 = fract(vec3(p) * vec3(.51031,.911369,.13787));
 p3 += dot(p3, p3.yzx + 0.0);
 return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));
}

vec4 N14(float t) {
return fract(sin(t*vec4(123., 10., 156., 264.))*vec4(6547., 345., 8799., 164.));
}

float N(float t) {
  return fract(sin(t*20000.564)*58.76);
}

float Saw(float b, float t) {
return S(0.01, b, t)*S(1., b, t);
}

vec2 DropLayer2(vec2 uv, float t) {
  vec2 UV = uv;
  
  uv.y += t*0.75;
  vec2 a = vec2(3., 1.);
  vec2 grid = a*2.;
  vec2 id = floor(uv*grid);
  
  float colShift = N(id.x); 
  uv.y += colShift;
  
  id = floor(uv*grid);
  vec3 n = N13(id.x*3.2+id.y*.1);
  vec2 st = fract(uv*grid)-vec2(.5, 0);
  
  float x = n.x-.5;
  
  float y = UV.y*20.;
  float wiggle = sin(y+sin(y));
  x += wiggle*(.5-abs(x))*(n.z-.5);
  x *= .7;
  float ti = fract(t+n.z);
  y = (Saw(.85, ti)-.5)*.9+.5;
  vec2 p = vec2(x, y);
  
  float d = length((st-p)*a.yx);
  
  float mainDrop = S(.4, .0, d);
  
  float r = sqrt(S(1., y, st.y));
  float cd = abs(st.x-x);
  float trail = S(.23*r, .15*r*r, cd);
  float trailFront = S(-.02, .02, st.y-y);
  trail *= trailFront*r*r;
  
  y = UV.y;
  float trail2 = S(.2*r, .0, cd);
  float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;
  y = fract(y*10.)+(st.y-.5);
  float dd = length(st-vec2(x, y));
  droplets = S(.3, 0., dd);
  float m = mainDrop+droplets*r*trailFront;
  
  return vec2(m, trail);
  
}

float StaticDrops(vec2 uv, float t) {
  vec2 id = floor(uv);
  uv = fract(uv)-.15;
  vec3 n = N13(id.x * 0. + id.y * 0.);
  vec2 p = (n.xy-.5)*0.;
  float d = length(uv-p);
  
  float fade = Saw(.0125, fract(t+n.z));
  float c = S(.513, 0., d)*fract(n.z*1.)*fade;
  return c;
}

vec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {
  float s = StaticDrops(uv, t*0.5); 
  vec2 m1 = DropLayer2(uv, t)*l1;
  vec2 m2 = DropLayer2(uv*.85, t)*l2;
  
  float c = s+m1.x+m2.x;
  c = S(.73, 2., c);
  
  return vec2(c, max(m1.y*l0, m2.y*l1));
}


void main(in function<vec4(vec2)> texA, out vec4 Color) {
  vec2 uv = fragment(std::getVertexTexCoord());
  
  float T = std::getTime();
  float t = T*.035;
    
  float rainAmount = sin(T*.025)*.50163+.5;
  
  float maxBlur = 0.0;
  float minBlur = 0.0;

  float staticDrops = S(.0, 0., 0.0000001);
  float layer1 = S(.025, .5, rainAmount);
  float layer2 = S(.0, .5, 0.0);
  
  vec2 c = Drops(uv, t, staticDrops, layer1, layer2);

  vec2 e = vec2(.00035, 0.);
  float cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;
  float cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;
  vec2 n = vec2(cx-c.x, cy-c.x);		// expensive normals

  float nFactor = ((n.x * n.x) + (n.y)) * 40.;
  vec4 addGreen = vec4(0., 1., 0., 1.) * nFactor;
  if(addGreen.g < 0.){
    addGreen.g = abs(addGreen.g * addGreen.g);
  }
  vec4 col = texA(uv+n) + addGreen;  
  
  Color = col;
  
}